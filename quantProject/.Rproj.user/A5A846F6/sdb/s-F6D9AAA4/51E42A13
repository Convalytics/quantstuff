{
    "contents" : "### Stock Analysis Functions\n\nsetwd(\"~/GitHub/quantstuff/quantProject\")\n\nlibrary(quantmod)\n\n######################################################################################\nPPO <- function(x) {\n   x$ppo <- ((EMA(Ad(x),12) - EMA(Ad(x),26)) / EMA(Ad(x),26)) * 100\n   x$signal <- EMA(x$ppo,9)\n   x$ppoHist <- x$ppo - x$signal\n   #return(x[,c(\"ppo\",\"signal\",\"ppoHist\")])\n   return(x)\n}\n\n####################################################################################\n\n#Guppy Multiple Moving Average\nGMMA <- function(x) {\n   fastMA <- c(3,5,8,10,12,15)\n   slowMA <- c(30,35,40,45,50,60)\n   x <- sapply(c(fastMA,slowMA),\n               function(xx)EMA(x,xx))\n   return(x)   \n}\n\n################################################\n\naddGuppy <- newTA(FUN=GMMA,\n                  preFUN=Cl,\n                  col=c(rep(3,6),\n                        rep(\"#333333\",6)),\n                  legend=\"GMMA\")\n\n######################################################################\n\ngetSignals <- function(sym,rng,dta){\n   mySymbol <- toupper(sym)\n   dayRange <- as.numeric(rng)\n   stockData <- dta\n   names(stockData) <- c(\"Open\",\"High\",\"Low\",\"Close\",\"Volume\",\"Adjusted\")      \n   \n   stockData$BBand_pctB <- as.xts(BBands(Ad(stockData))$pctB)\n   stockData$RSI <- as.xts(RSI(Ad(stockData)))\n   stockData$PPO <- PPO(stockData)$ppoHist\n   stockData$ATR <- ATR(stockData)$atr\n   stockData$EMA3 <- EMA(Ad(stockData), n=3)$Adjusted.EMA.3\n   stockData$EMA30 <- EMA(Ad(stockData), n=30)$Adjusted.EMA.30\n   stockData$EMADiff <- (stockData$EMA3 - stockData$EMA30) / stockData$EMA30\n   stockData$mySignal <- (((stockData$RSI - 50)*3) + ((stockData$BBand_pctB - .5)*100)) /4 + (stockData$EMADiff * 100)\n   stockData$stopPct <- ((stockData$ATR * 2) / Ad(stockData)) * 100\n   return(stockData)\n   \n}\n\n##### Chart  #################################################\ngetChart <- function(sym,rng,dta){\n   mySymbol <- toupper(sym)\n   dayRange <- as.numeric(rng)\n   stockData <- as.xts(getSignals(mySymbol,dayRange,dta))\n   chartSeries(last(stockData,dayRange),\n               type=\"candlesticks\",\n               name=paste0(mySymbol, \" - Past \", dayRange, \" Days\"),\n               theme=chartTheme(\"white\"),\n               up.col=\"white\",\n               dn.col=\"black\"     \n   )\n   #addTA(stockData$EMADiff, col=\"red\")  #EMA diff turns out to just be the RSI...\n   addTA(stockData$mySignal, col=\"red\")\n   \n}\n\n#########################################################################\n\nbbandScanner <- function(a){\n   \n   mySymbol <- toupper(a)\n   myStock <- eval(parse(text=mySymbol))\n   \n   bands <- BBands(Cl(myStock))$pctB\n   bands$rsi <- RSI(Ad(myStock))\n   bands$Close <- Ad(myStock)\n   bands <- tail(bands, n=1)\n   bands$signal <- NA\n   bands$signal <- ifelse(bands$pctB > 1, \"Sell\",\n                          ifelse(bands$pctB < 0,\"Buy\",\n                                 \"-\"))\n   return(bands)\n}\n########################################################\n\n#### bbscan function ###############################################\nbbscan <- function(stocklist){\n   \n   signalList <- as.data.frame(matrix(NA,nrow=0,ncol=5))\n   names(signalList) <- c(\"stock\",\"Close\",\"rsi\",\"pctB\",\"signal\")\n   \n   for(i in 1:length(stocklist)){\n      testgrab <- bbandScanner(stocklist[i])\n      signalList[i,\"stock\"]<-stocklist[i]\n      signalList[i,\"Close\"]<-testgrab$Close\n      signalList[i,\"rsi\"]<-  testgrab$rsi\n      signalList[i,\"pctB\"]<-testgrab$pctB\n      signalList[i,\"signal\"]<-testgrab$signal\n      \n   }\n}\n#############################################################################\n#############################################################################\nscanner <- function(scanList) {\n   if(exists(\"lastRow\")==T) {\n      rm(lastRow)\n   }\n   \n   lastRow <- data.frame(matrix(ncol=16,nrow=1))\n   #for testing scanList <- c(\"SSO\",\"DDM\")\n   for(stock in scanList){\n      currentStock <- NA\n      currentStock <- eval(parse(text=stock))\n      currentStock <- getSignals(stock,90,currentStock)\n      lastRow <- as.data.frame(rbind(lastRow, c(stock, currentStock[nrow(currentStock),])))\n      lastRow <- na.omit(lastRow)\n   }\nnames(lastRow) <- c(\"stock\", \"Open\",\"High\",\"Low\",\"Close\",\"Volume\",\"Adjusted\",\"BBand_pctB\",\"RSI\",\"PPO\",\"ATR\",\"EMA3\",\"EMA30\",\"EMADiff\",\"mySignal\",\"stopPct\")\n\nlastRow$buysell <- ifelse(lastRow$BBand_pctB > 0 & lastRow$RSI > 60,\"SELL\",\n                          ifelse(lastRow$BBand_pctB < 0 & lastRow$RSI < 40,\"BUY\",\"-\"))\n\n#lastRow <- subset(lastRow, buysell != \"-\")\n\nreturn(lastRow)\n}\n\n# \n# scanned <- bbscan(stocklist)\n# subset(scanned, signal!=\"-\")\n",
    "created" : 1405622485186.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3798776716",
    "id" : "51E42A13",
    "lastKnownWriteTime" : 1397769516,
    "path" : "~/GitHub/quantstuff/quantProject/StockAnalysisFunctions.R",
    "project_path" : "StockAnalysisFunctions.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}